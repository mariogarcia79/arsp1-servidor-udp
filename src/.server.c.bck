/**
 * 
 * Practica T5: qotd
 * 
 * García Carbonero, Mario
 * Adán de la Fuente, Hugo
 * 
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>         
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>

struct servent *qotd_servent;

#define MAX_LENGTH 1024

 int main(int argc, char* argv[]) {
    int sockfd;
    struct sockaddr_in server_addr;
    struct sockaddr_in client_addr;
    socklen_t client_len = sizeof(client_addr);
    FILE *fd;
    char msg[512];
    char quote[MAX_LENGTH];

    //TODO: Crear constante UDP en lugar del literal, permitir TCP a futuro.
    if ((qotd_servent = getservbyname("qotd", "tcp")) == NULL) {
        fprintf(stderr, "No se pudo obtener el puerto para el servicio qotd\n");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = qotd_servent->s_port;
    server_addr.sin_addr.s_addr = INADDR_ANY;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    bind(sockfd, (struct sockaddr *) &server_addr, sizeof(server_addr));

    while(1){
        recvfrom(sockfd, msg, sizeof(msg), 0, 
                (struct sockaddr *) &client_addr, &client_len);

        if(!strcmp(msg, "Enviame el mensaje del dia")){

            system("/usr/games/fortune -s > /tmp/quote.txt");
            fd = fopen("/tmp/quote.txt", "r");
            int pos = 0;

            do {
                quote[pos] = fgetc(fd);
                pos++;
            } while( pos < (MAX_LENGTH - 2) && !feof(fd) );

            quote[pos - 1] = '\0';
            fclose(fd);

        } else {
            fprintf(stderr, "Error: bad request");
            continue;
        }
       
        
        sendto(sockfd, quote, sizeof(quote), 0, 
                (struct sockaddr *) &client_addr, client_len);


    }

 }
